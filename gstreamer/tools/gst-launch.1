.TH "GStreamer" "1" "March 2001"
.SH "NAME"
gst\-launch \- build and run a GStreamer pipeline
.SH "SYNOPSIS"
\fBgst\-launch\fR \fI[OPTION...]\fR PIPELINE\-DESCRIPTION
.SH "DESCRIPTION"
.LP 
\fIgst\-launch\fP is a tool that is used to build and run a basic \fIGStreamer\fP pipeline.

A simple commandline looks like:

 gst\-launch filesrc location=music.mp3 ! mad ! osssink

This plays an mp3 music file music.mp3 using libmad, and:

 gst\-launch filesrc location=music.mp3 ! mp3parse ! mpg123 ! osssink

Plays and mp3 music file using mpg123

You can also stream files over http:

 gst\-launch httpsrc location=http://domain.com/music.mp3 ! mad ! osssink

And using gnome\-vfs you can do the same with:

 gst\-launch gnomevfssrc location=music.mp3 ! mad ! osssink
 gst\-launch gnomevfssrc location=http://domain.com/music.mp3 ! mad ! osssink

And too play the same song with gnome\-vfs via smb:

 gst\-launch gnomevfssrc location=smb://computer/music.mp3 ! mad ! osssink

You can also stream your mpeg 1 system streams from one machine to another using RTP by:
 
 gst\-launch rtprecv media_type=mpeg1_sys ! mpegdemux video_%02d! { queue ! mpeg2dec ! xvideosink } mpegdemux0.audio_%02d! { queue ! mad ! osssink }

on the receiver end and:

 gst\-launch filesrc location=mpeg1system.mpeg ! mpegparse ! rtpsend ip=IPorHostname

on the transmitter end.

Here we convert a Mp3 file into an Ogg Vorbis file:

 gst\-launch filesrc location=music.mp3 ! mad ! vorbisenc ! disksink location=music.ogg

Or converting from mp3 to Flac:
 gst\-launch filesrc location=claptrap.mp3 ! mad ! flacenc ! disksink location=test.flac

And then we can play that file with:

 gst\-launch filesrc location=music.ogg ! vorbisdec ! osssink

Some other useful pipelines are..
Plays wav files (currently there are no wav encoders):

 gst\-launch filesrc location=music.wav ! parsewav ! osssink

Converts wav files into mp3 and ogg files:

 gst\-launch filesrc location=music.wav ! parsewav ! vorbisenc ! disksink location=music.ogg
 gst\-launch filesrc location=music.wav ! parsewav ! mpegaudio ! disksink location=music.mp3

You can also use lame for mp3 encoding if you have it installed, it does a 
much better job than mpegaudio.

Rips all songs from cd and saves them into a mp3 file:

 gst\-launch cdparanoia ! mpegaudio ! disksink location=cd.mp3

You can toy around with gst\-inspect to discover the settings for 
cdparanoia to rip individual tracks

Record sound from your sound input and encode it into an ogg file:

 gst\-launch osssrc ! vorbisenc ! disksink location=input.ogg

gst\-launch not only handles audio but video as well:
For mpeg video files (here outputing to aasink) :

 gst\-launch filesrc location=JB_FF9_TheGravityOfLove.mpg ! mpegdemux video_%02d! { queue ! mpeg2dec ! aasink }

For vob files (here outputting image to sdlvideosink): 
 gst\-launch filesrc location=/flflfj.vob ! mpegdemux video_%02d! { queue ! mpeg2dec ! sdlvideosink }

Play a mpeg movie with sound using the sdlvideosink:
 gst\-launch filesrc location=movie.mpg ! mpegdemux video_%02d! { queue ! mpeg2dec ! sdlvideosink } mpegdemux0.audio_%02d! { queue ! mad ! osssink }

Playing a avi movie would be done with something like this:
gst\-launch filesrc location=movie.avi ! avidemux video_%02d! { queue ! windec ! sdlvideosink }

See other docs, examples, and the source for description on how to
create a PIPELINE\-DESCRIPTION.
.
.SH "OPTIONS"
.l
\fIgst\-launch\fP accepts the following options:
.TP 8
.B  \-\-help
Print help synopsis and available FLAGS
.TP 8
.B  \-\-silent
Do not output status information
.TP 8
.B  \-\-exclude=TYPE, \-XTYPE
Do not output status information of TYPE
.TP 8
.B  \-\-output=FILE, \-oFILE
Save XML representation of pipeline to FILE and exit
.TP 8
.B  \-\-gst\-info\-mask=FLAGS
\fIGStreamer\fP info flags to set (list with \-\-help)
.TP 8
.B  \-\-gst\-debug\-mask=FLAGS
\fIGStreamer\fP debugging flags to set (list with \-\-help)
.TP 8
.B  \-\-gst\-mask=FLAGS
\fIGStreamer\fP info and debugging flags to set (list with \-\-help)
.TP 8
.B  \-\-gst\-plugin\-spew
\fIGStreamer\fP info flags to set
Enable printout of errors while loading \fIGStreamer\fP plugins
.TP 8
.B  \-\-gst\-plugin\-path=PATH
Add directories separated with ':' to the plugin search path
.SH "SEE ALSO"
.BR gst\-complete (1),
.BR gst\-register (1),
.BR gst\-inspect (1)
.SH "AUTHOR"
The GStreamer team at http://gstreamer.net/
