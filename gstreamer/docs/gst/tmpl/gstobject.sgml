<!-- ##### SECTION Title ##### -->
GstObject

<!-- ##### SECTION Short_Description ##### -->
Basis for the GST object hierarchy.

<!-- ##### SECTION Long_Description ##### -->
<para>
GstObject provides a root for the object hierarchy tree filed in by the
GST library.  It is currently a thin wrapper on top of
<classname>GtkObject</classname>, but eventually will be replaced by a
stripped down version of it.  This will remove all the X dependencies from
the GST library, making it much more portably and generally useful.
</para>

<para>
GstObject gives us basic refcounting and parenting functionality, though
it is possible that we could use <classname>GtkObject</classname>'s
equivalent functions.  I'll probably use what I have now until I strip
down <classname>GtkObject</classname> to re-parent the hierarchy.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### MACRO GST_OBJECT_FLAG_LAST ##### -->
<para>
subclasses can use this value to start the enumeration of their flags
</para>



<!-- ##### STRUCT GstObject ##### -->
<para>

</para>


<!-- ##### MACRO GST_FLAGS ##### -->
<para>
This macro returns the entire set of flags for the object.
</para>

@obj: Object to return flags for.


<!-- ##### MACRO GST_FLAG_IS_SET ##### -->
<para>
This macro checks to see if the given flag is set.
</para>

@obj: GstSrc to check for flag in.
@flag: Flag to check for, must be a single bit in guint32.


<!-- ##### MACRO GST_FLAG_SET ##### -->
<para>
This macro sets the given bits.
</para>

@obj: Object to set flag in.
@flag: Flag to set, can by any number of bits in guint32.


<!-- ##### MACRO GST_FLAG_UNSET ##### -->
<para>
This macro usets the given bits.
</para>

@obj: Object to unset flag in.
@flag: Flag to set, must be a single bit in guint32.


<!-- ##### MACRO GST_LOCK ##### -->
<para>
This macro will obtain a lock on the object, making serialization
possible.
</para>

@obj: Object to lock.


<!-- ##### MACRO GST_TRYLOCK ##### -->
<para>
This macro will try to obtain a lock on the object, but will return with
FALSE if it can't get it immediately.
</para>

@obj: Object to try to get a lock on.


<!-- ##### MACRO GST_UNLOCK ##### -->
<para>
This macro releases a lock on the object.
</para>

@obj: Object to unlock.


<!-- ##### MACRO GST_GET_LOCK ##### -->
<para>

</para>

@obj: 


<!-- ##### MACRO GST_OBJECT_PARENT ##### -->
<para>

</para>

@obj: 


<!-- ##### MACRO GST_OBJECT_NAME ##### -->
<para>

</para>

@obj: 


<!-- ##### FUNCTION gst_object_new ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gst_object_set_parent ##### -->
<para>

</para>

@object: 
@parent: 


<!-- ##### FUNCTION gst_object_get_parent ##### -->
<para>

</para>

@object: 
@Returns: 


<!-- ##### FUNCTION gst_object_set_name ##### -->
<para>

</para>

@object: 
@name: 


<!-- ##### FUNCTION gst_object_get_name ##### -->
<para>

</para>

@object: 
@Returns: 


<!-- ##### FUNCTION gst_object_unparent ##### -->
<para>

</para>

@object: 


<!-- ##### MACRO gst_object_ref ##### -->
<para>

</para>

@object: the object


<!-- ##### MACRO gst_object_unref ##### -->
<para>

</para>

@object: the object


<!-- ##### MACRO gst_object_sink ##### -->
<para>

</para>

@object: the object


<!-- ##### MACRO gst_object_destroy ##### -->
<para>

</para>

@object: the object


<!-- ##### FUNCTION gst_object_save_thyself ##### -->
<para>

</para>

@object: 
@parent: 
@Returns: 


<!-- ##### FUNCTION gst_object_get_path_string ##### -->
<para>

</para>

@object: 
@Returns: 


<!-- ##### FUNCTION gst_class_signal_emit_by_name ##### -->
<para>

</para>

@object: 
@name: 
@self: 


<!-- ##### FUNCTION gst_class_signal_connect ##### -->
<para>

</para>

@klass: 
@name: 
@func: 
@func_data: 
@Returns: 


<!-- ##### SIGNAL GstObject::parent-set ##### -->
<para>

</para>

@gstobject: the object which received the signal.
@arg1: the new parent

<!-- ##### SIGNAL GstObject::object-saved ##### -->
<para>
Is trigered whenever a new object is saved to XML. You can connect to
this signal to insert custom XML tags into the core XML.
</para>

@gstobject: the object which received the signal.
@arg1: the xmlNodePtr of the parent node

