<!-- ##### SECTION Title ##### -->
GstPipeline

<!-- ##### SECTION Short_Description ##### -->
Top-level bin with scheduling and pipeline management functionality.

<!-- ##### SECTION Long_Description ##### -->
<para>
In almost all cases, you'll want to use a GstPipeline when creating a
filter graph.  The GstPipeline will manage all the scheduling issues,
including threading, as well as provide simple interfaces to common
functions, like 'Play'.
</para>
<para>
gst_pipeline_new() is used to create a pipeline. when you are done with 
the pipeline, use gst_object_unref() to free its resources.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
#GstBin
</para>

<!-- ##### STRUCT GstPipeline ##### -->
<para>

</para>

@fixed_clock: 
@stream_time: 
@delay: 
@play_timeout: 

<!-- ##### ARG GstPipeline:delay ##### -->
<para>

</para>

<!-- ##### ARG GstPipeline:play-timeout ##### -->
<para>

</para>

<!-- ##### ENUM GstPipelineFlags ##### -->
<para>

</para>

@GST_PIPELINE_FLAG_FIXED_CLOCK: 
@GST_PIPELINE_FLAG_LAST: 

<!-- ##### FUNCTION gst_pipeline_new ##### -->
<para>

</para>

@name: 
@Returns: 


<!-- ##### FUNCTION gst_pipeline_auto_clock ##### -->
<para>

</para>

@pipeline: 


<!-- ##### FUNCTION gst_pipeline_get_bus ##### -->
<para>

</para>

@pipeline: 
@Returns: 


<!-- ##### FUNCTION gst_pipeline_get_clock ##### -->
<para>

</para>

@pipeline: 
@Returns: 


<!-- ##### FUNCTION gst_pipeline_get_last_stream_time ##### -->
<para>

</para>

@pipeline: 
@Returns: 


<!-- ##### FUNCTION gst_pipeline_set_clock ##### -->
<para>

</para>

@pipeline: 
@clock: 


<!-- ##### FUNCTION gst_pipeline_set_new_stream_time ##### -->
<para>

</para>

@pipeline: 
@time: 


<!-- ##### FUNCTION gst_pipeline_use_clock ##### -->
<para>

</para>

@pipeline: 
@clock: 


