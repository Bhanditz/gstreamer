<!-- ##### SECTION Title ##### -->
GstElement

<!-- ##### SECTION Short_Description ##### -->
Base class for all pipeline elements

<!-- ##### SECTION Long_Description ##### -->
<para>
GstElement is the base class needed to construct an element that can be
used in a GST pipeline.  As such, it is not a functional entity, and
cannot do anything when placed in a pipeline.
</para>

<para>
All GstElements have a list containing the #GstPad structure for all their
inputs and outputs.  These can be added with gst_element_add_pad() or
gst_element_add_ghost_pad(), and retrieved by name with
gst_element_get_pad(), or in a list form by gst_element_get_pad_list().
</para>

<para>
gst_element_connect() is a convenience function provided to make it
simpler to connect pads of two elements together.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT GstElement ##### -->
<para>

</para>


<!-- ##### ENUM GstElementState ##### -->
<para>
This enum defines the standard states an element may be in.  GST_STATE_MAX
is the highest bit that can be set, and is used internally.
</para>

@GST_STATE_COMPLETE: 
@GST_STATE_RUNNING: 
@GST_STATE_DISCOVERY: 
@GST_STATE_PREROLL: 
@GST_STATE_PLAYING: 
@GST_STATE_PAUSED: 
@GST_STATE_MAX: 

<!-- ##### MACRO GST_STATE ##### -->
<para>
This macro returns the entire state of the element.
</para>

@obj: Element to return state for.


<!-- ##### MACRO GST_STATE_IS_SET ##### -->
<para>
This macro checks to see if the given state is set.
</para>

@obj: Element to check for state.
@flag: State to check for, must be a single bit in guint32.


<!-- ##### MACRO GST_STATE_SET ##### -->
<para>
This macro sets the given state on the element.
</para>

@obj: Element to set state of.
@flag: State to set, can be any number of bits in guint32.


<!-- ##### MACRO GST_STATE_UNSET ##### -->
<para>
This macro unsets the given state on the element.
</para>

@obj: Element to unset state of.
@flag: State to unset, can be any number of bits in guint32.


<!-- ##### STRUCT GstElementDetails ##### -->
<para>
This struct is used to define public information about the element.  It
describes the element, mostly for the benefit of editors.
</para>

@longname: 
@class: 
@description: 
@version: 
@author: 
@copyright: 

<!-- ##### STRUCT GstElementFactory ##### -->
<para>
This factory is used when registering the element, and contains the name
of the element, the GtkType value for it, as well as a pointer to the
GstElementDetails struct for the element.
</para>

@name: 
@type: 
@details: 

<!-- ##### USER_FUNCTION GstElementLoopFunction ##### -->
<para>
This function type is used to specify a loop function for the element.  It
is passed the element in question, and is expect to return only in error
circumstances.
</para>

@element: The element in question.


<!-- ##### FUNCTION gst_element_new ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gst_element_set_loop_function ##### -->
<para>

</para>

@element: 
@loop: 


<!-- ##### FUNCTION gst_element_set_name ##### -->
<para>

</para>

@element: 
@name: 


<!-- ##### FUNCTION gst_element_get_name ##### -->
<para>

</para>

@element: 
@Returns: 


<!-- ##### FUNCTION gst_element_set_manager ##### -->
<para>

</para>

@element: 
@manager: 


<!-- ##### FUNCTION gst_element_get_manager ##### -->
<para>

</para>

@element: 
@Returns: 


<!-- ##### FUNCTION gst_element_add_pad ##### -->
<para>

</para>

@element: 
@pad: 


<!-- ##### FUNCTION gst_element_add_ghost_pad ##### -->
<para>

</para>

@element: 
@pad: 


<!-- ##### FUNCTION gst_element_get_pad ##### -->
<para>

</para>

@element: 
@name: 
@Returns: 


<!-- ##### FUNCTION gst_element_get_pad_list ##### -->
<para>

</para>

@element: 
@Returns: 


<!-- ##### FUNCTION gst_element_connect ##### -->
<para>

</para>

@src: 
@srcpadname: 
@dest: 
@destpadname: 
<!-- # Unused Parameters # -->
@srcpad: 
@destpad: 


<!-- ##### FUNCTION gst_element_set_state ##### -->
<para>

</para>

@element: 
@state: 
@Returns: 


<!-- ##### FUNCTION gst_element_error ##### -->
<para>

</para>

@element: 
@error: 


<!-- ##### FUNCTION gst_element_change_state ##### -->
<para>

</para>

@element: 
@state: 
@Returns: 


<!-- ##### MACRO gst_element_destroy ##### -->
<para>

</para>

@element: 


<!-- ##### FUNCTION gst_element_save_thyself ##### -->
<para>

</para>

@element: 
@parent: 
@Returns: 


<!-- ##### FUNCTION gst_elementfactory_new ##### -->
<para>

</para>

@name: 
@type: 
@details: 
@Returns: 


<!-- ##### FUNCTION gst_elementfactory_register ##### -->
<para>

</para>

@elementfactory: 


<!-- ##### FUNCTION gst_elementfactory_find ##### -->
<para>

</para>

@name: 
@Returns: 


<!-- ##### FUNCTION gst_elementfactory_get_list ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gst_elementfactory_create ##### -->
<para>

</para>

@factory: 
@name: 
@Returns: 


<!-- ##### FUNCTION gst_elementfactory_make ##### -->
<para>

</para>

@factoryname: 
@name: 
@Returns: 


<!-- ##### SIGNAL GstElement::state-change ##### -->
<para>

</para>

@gstelement: the object which received the signal.
@arg1: 

<!-- ##### SIGNAL GstElement::new-pad ##### -->
<para>

</para>

@gstelement: the object which received the signal.
@arg1: 

<!-- ##### SIGNAL GstElement::new-ghost-pad ##### -->
<para>

</para>

@gstelement: the object which received the signal.
@arg1: 

<!-- ##### SIGNAL GstElement::error ##### -->
<para>

</para>

@gstelement: the object which received the signal.
@arg1: 

